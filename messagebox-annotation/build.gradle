apply plugin: 'java-library'
//apply plugin: 'maven'
apply plugin: 'maven-publish'

group = 'com.github.allenxuan'
version = "1.6.0"

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

sourceCompatibility = "8"
targetCompatibility = "8"


java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            from components.java
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')

                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // invalid dependencies should be ignored

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('artifactId', dep.name)

                    if (dep.version == 'unspecified') {
                        dependencyNode.appendNode('groupId', project.ext.pomGroupID)
                        dependencyNode.appendNode('version', project.ext.pomVersion)
                        System.println("${project.ext.pomGroupID} ${dep.name} ${project.ext.pomVersion}")
                    } else {
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('version', dep.version)
                        System.println("${dep.group} ${dep.name} ${dep.version}")
                    }

                    dependencyNode.appendNode('scope', scope)
                    // Some dependencies may have types, such as aar, that should be mentioned in the POM file
                    def artifactsList = dep.properties['artifacts']
                    if (artifactsList != null && artifactsList.size() > 0) {
                        final artifact = artifactsList[0]
                        dependencyNode.appendNode('type', artifact.getType())
                    }

                    if (!dep.transitive) {
                        // In case of non transitive dependency, all its dependencies should be force excluded from them POM file
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // For transitive with exclusions, all exclude rules should be added to the POM file
                        final exclusions = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            final exclusionNode = exclusions.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                configurations.api.getDependencies().each { dep -> addDependency(dep, "api") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "implementation") }
//                    configurations.provided.getDependencies().each { dep -> addDependency(dep, "provided") }
                configurations.compileOnly.getDependencies().each { dep -> addDependency(dep, "compileOnly") }
                configurations.runtimeOnly.getDependencies().each { dep -> addDependency(dep, "runtimeOnly") }
//                    println configurations.api.getDependencies()
//                    println configurations.implementation.getDependencies()
//                    println configurations.provided.getDependencies()
//                    println configurations.runtimeOnly.getDependencies()
//                    println configurations.compileOnly.getDependencies()
            }
        }
    }
}

//ext {
//    bintrayRepo = 'maven'
//    bintrayName = 'messagebox-annotation'
//
//    publishedGroupId = 'com.github.allenxuan'
//    libraryName = 'messagebox-annotation'
//    artifact = 'messagebox-annotation'
//
//    libraryDescription = 'MessageBox is a message/event framework for Android/Java. messagebox-annotation is the annotation part of MessageBox.'
//
//    siteUrl = 'https://github.com/allenxuan/MessageBoxProject'
//    gitUrl = 'https://github.com/allenxuan/MessageBoxProject.git'
//
//    libraryVersion = '1.1.0'
//
//    developerId = 'allenxuan'
//    developerName = 'Xuanyi Huang'
//    developerEmail = 'allenxuan@gmail.com'
//
//    licenseName = 'The Apache Software License, Version 2.0'
//    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//    allLicenses = ["Apache-2.0"]
//}
//
////********************************************
//apply plugin: 'com.github.dcendents.android-maven'
//
//group = publishedGroupId                               // Maven Group ID for the artifact
//
//install {
//    repositories.mavenInstaller {
//        // This generates POM.xml with proper parameters
//        pom {
//            project {
//                packaging 'aar'
//                groupId publishedGroupId
//                artifactId artifact
//
//                // Add your description here
//                name libraryName
//                description libraryDescription
//                url siteUrl
//
//                // Set your license
//                licenses {
//                    license {
//                        name licenseName
//                        url licenseUrl
//                    }
//                }
//                developers {
//                    developer {
//                        id developerId
//                        name developerName
//                        email developerEmail
//                    }
//                }
//                scm {
//                    connection gitUrl
//                    developerConnection gitUrl
//                    url siteUrl
//
//                }
//            }
//        }
//    }
//}
////********************************************
//apply plugin: 'com.jfrog.bintray'
//
//version = libraryVersion
//
//if (project.hasProperty("android")) { // Android libraries
//    task sourcesJar(type: Jar) {
//        classifier = 'sources'
//        from android.sourceSets.main.java.srcDirs
//    }
//
//    task javadoc(type: Javadoc) {
////        source = android.sourceSets.main.java.srcDirs
////        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    }
//} else { // Java libraries
//    task sourcesJar(type: Jar, dependsOn: classes) {
//        classifier = 'sources'
//        from sourceSets.main.allSource
//    }
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
//
//artifacts {
//    archives javadocJar
//    archives sourcesJar
//}
//
//// Bintray
//Properties properties = new Properties()
//properties.load(project.rootProject.file('local.properties').newDataInputStream())
//
//bintray {
//    user = properties.getProperty("bintray.user")
//    key = properties.getProperty("bintray.apikey")
//
//    configurations = ['archives']
//    pkg {
//        repo = bintrayRepo
//        name = bintrayName
//        desc = libraryDescription
//        websiteUrl = siteUrl
//        vcsUrl = gitUrl
//        licenses = allLicenses
//        publish = true
//        publicDownloadNumbers = true
//        version {
//            desc = libraryDescription
//            gpg {
//                sign = true //Determines whether to GPG sign the files. The default is false
//                passphrase = properties.getProperty("bintray.gpg.password")
//                //Optional. The passphrase for GPG signing'
//            }
//        }
//    }
//}
////********************************************
